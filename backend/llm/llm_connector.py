import requests
import logging

class LLMConnector:
    def __init__(self, api_key, base_url="https://generativelanguage.googleapis.com/v1beta/"):
        """
        Initialize the LLMConnector with API key and base URL.
        :param api_key: API key for Google Generative Language API.
        :param base_url: Base URL for the Google Generative Language API.
        """
        self.api_key = api_key
        self.base_url = base_url  # Correct Base URL (ensure it ends with a slash)
        # The API key is appended as a query parameter, so headers only need Content-Type.
        self.headers = {
            "Content-Type": "application/json"
        }

    def call_llm(self, prompt, model_name="gemini-2.0-flash"):
        """
        Call the Google Generative Language API with the given prompt.
        :param prompt: The text prompt to send.
        :param model_name: Name of the model to use.
        :return: The plain text generated by the API.
        """
        # Construct the full URL with API key as query parameter.
        url = f"{self.base_url}models/{model_name}:generateContent?key={self.api_key}"
        # Construct the payload as per the working curl example.
        payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt
                        }
                    ]
                }
            ]
        }

        try:
            logging.debug(f"Sending request to {url} with prompt: {prompt}")
            response = requests.post(url, headers=self.headers, json=payload, timeout=30)
            response.raise_for_status()

            response_data = response.json()
            logging.debug(f"Response received: {response_data}")

            # Extract the generated text.
            if "candidates" in response_data and response_data["candidates"]:
                candidate = response_data["candidates"][0]
                if "output" in candidate:
                    return candidate["output"].strip()
                elif "content" in candidate:
                    content = candidate.get("content", {})
                    parts = content.get("parts", [])
                    if parts and "text" in parts[0]:
                        return parts[0]["text"].strip()
                    else:
                        logging.error(f"Candidate 'content' returned: {content}")
                        raise Exception("Unexpected response format: 'text' not found in candidate 'content'")
                else:
                    logging.error(f"Candidate returned: {candidate}")
                    raise Exception("Unexpected response format: neither 'output' nor 'content' found in candidate")
            else:
                logging.error("Unexpected response format: 'candidates' not found in response")
                raise Exception("Unexpected response format: 'candidates' not found")

        except requests.exceptions.Timeout as e:
            logging.error("Request timed out.")
            raise Exception("Request timed out.") from e
        except requests.exceptions.RequestException as e:
            logging.error(f"Request failed: {e}")
            raise Exception(f"Google Generative Language API call failed: {e}") from e
        except Exception as e:
            logging.error(f"Error processing API response: {e}")
            raise Exception(f"Error processing API response: {e}") from e